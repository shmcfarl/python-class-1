Notes:
I. Preliminaries
Python 2 vs Python 3: 
	- Not backward compatible 

II. Overview
	- Indentation
		- 4 spaces = default recommended way. If using tabs then tool must represent that to 4 spaces.
		- NEVER MIX tabs and spaces

	- You can seperate two statements by using ";"
	- Statement = one line of executable python code
	- Expression = some part of a statement evaluates to a value. 7 + 5 is an expression.

	- Python 2.x always use raw_input
	- interepreter vs. script = you have to use print to get value out
	

III. Data types and variables (Part1)
	- Assigning variables
		- nouns = data types
		- verbs = flow control structures
	- Dynamic typing		
		-statically typed vs. dynamically typed
			- a = 10 # type(a) is an int
			- a = 'a string' # type(a) is a str
			- Python won't protect you from wrong types
	- Strings are immutable - Cannot change a string
		 a = 'test' # test is a sting in memory
		- you can't change test. You can point 'a' to a new place in memory
		a = 'test'
		b = a
		b will show test
		- Python 2 and 3 change how unicode works
		- Concatinate strings
		
	- Numbers
		-integer division ( 10/3 )
			convert to 10 / 3.0 - uses a float
		-If you exceed the memory reserved for an integer then you will get a 'long'. Python will handle this for you
	
	- List and tuples
		- He may say array but he means list
		- A list can contain multiple element types
			a = [1,2,3,'abc', [] ]
		- Use 0 based indexes as it is better for math
		- List are mutable - changeable
		- a [0] = 'new'
		- reverse in list 
			a[-2]
		- Append
			a.append("again")
		- Pop
			a.pop()
		- length
			len(a)
		- type(a)

		- Tuples are immuntable - unchangeable lists
			b = (1,2, 'whatever', 4) # will end with error
			- done for memory performance

	- Booleans = true or false
		a = True
		b = False
		type(a) # bool

IV. Flow-control
	- If / Else
		if True:
			print "hello"
			print "again"
		else:
			print "whatever"

	- == is equal, != is not equal, > is greater than, >= greater than or equal, < less than, <= less than or equal
			- Can nest if/else/elif
				- Don't do this much. Probably a better way to do this.
	
	- Loops
		a = [0,1,2,3,4,5]
		for element in a:
			print element
		
		- I need to know the index of what I am modifying
		i = 0
		for elements in a:
			a[i] = element**2
			i += 1
		range(10)
		len(a)
		range(6)
		for i in range(len(a)):
			a[i] = a[i]**2

		- While - always have an exit condition
		i = 0		
		while True:
		  if i == 25:
				break
			print i
			i += 1
				
V. Example # HE DID NOT FINISH EXPLAINING THE REST OF THE EXERCISE GET THIS FROM HIM!!!!!!!!!!!
 - Make incremental changes
 - Small chunks
 - Keep program working with small changes
	- "pass" can be used in if statement as a null
  -import os
   os.system("ping" -c 3 -n " + ip)


VI. Functions
- Reuse actions
- Start with def
- a_sum(5,10) 5 is position 0 and 10 is 1
- named does not go off element position
- can set default values at start of def
- variable namespace:
  - local module level is value under def:
  - global level is set outside of def	
-dictionary is not ordered. A list is.
- import <library>
- call function
  import test2
  test2.asum(5,10)
- or from test2 import a_sum  # import without having name. not great due to name conflicts
  - a_sum(5,10)

VII. More on data types (Part 2)
- Dictionary - mutable
	- Dictionary is not ordered. You may not get consistent returns in order
	- Good to have named fields with dictionary
  - a.get('name')

-raw strings
  windows_path = 'C:\Windows\new\whatever' # \n can be an issue
 >>> windows_path = r'C:\Windows\new\whatever'
>>> print windows_path
C:\Windows\new\whatever

-Lists
- pop
- del b[0]
- remote based on value vs index
>>> a
[100, 2, 3, 4, 5]
>>> a.remove(100)
>>> a
[2, 3, 4, 5]


VIII. File in/out
- Missed the whole example on reading files

IX. Example

Not doing

X. Where to go
- 


Feedback:
- No slides/docs that explain your topics offline
- Did not get a full explanation of the example. Need the actual full example with comments











 



