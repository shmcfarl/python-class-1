Notes:
I. Preliminaries
Python 2 vs Python 3: 
	- Not backward compatible 

II. Overview
	- Indentation
		- 4 spaces = default recommended way. If using tabs then tool must represent that to 4 spaces.
		- NEVER MIX tabs and spaces

	- You can seperate two statements by using ";"
	- Statement = one line of executable python code
	- Expression = some part of a statement evaluates to a value. 7 + 5 is an expression.

	- Python 2.x always use raw_input
	- interepreter vs. script = you have to use print to get value out
	

III. Data types and variables (Part1)
	- Assigning variables
		- nouns = data types
		- verbs = flow control structures
	- Dynamic typing		
		-statically typed vs. dynamically typed
			- a = 10 # type(a) is an int
			- a = 'a string' # type(a) is a str
			- Python won't protect you from wrong types
	- Strings are immutable - Cannot change a string
		 a = 'test' # test is a sting in memory
		- you can't change test. You can point 'a' to a new place in memory
		a = 'test'
		b = a
		b will show test
		- Python 2 and 3 change how unicode works
		- Concatinate strings
		
	- Numbers
		-integer division ( 10/3 )
			convert to 10 / 3.0 - uses a float
		-If you exceed the memory reserved for an integer then you will get a 'long'. Python will handle this for you
	
	- List and tuples
		- He may say array but he means list
		- A list can contain multiple element types
			a = [1,2,3,'abc', [] ]
		- Use 0 based indexes as it is better for math
		- List are mutable - changeable
		- a [0] = 'new'
		- reverse in list 
			a[-2]
		- Append
			a.append("again")
		- Pop
			a.pop()
		- length
			len(a)
		- type(a)

		- Tuples are immuntable - unchangeable lists
			b = (1,2, 'whatever', 4) # will end with error
			- done for memory performance

	- Booleans = true or false
		a = True
		b = False
		type(a) # bool




		
		

			


			



IV. Flow-control



V. Example


VI. Functions


VII. More on data types (Part 2)

